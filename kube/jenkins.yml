---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: jenkins
  annotations:
    nginx.org/client-max-body-size: "10m"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  rules:
  - host: jenkins.ari-k8s.retiarno.my.id
    http:
      paths:
      - path: /
        backend:
          serviceName: jenkins
          servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
spec:
  selector:
    app: jenkins
  ports:
    - protocol: TCP
      port: 8080
      name: "http"
    - protocol: TCP
      port: 50000
      name: "jnlp"
    
---
apiVersion : apps/v1
kind: Deployment
metadata:
  name: jenkins 
  namespace: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins 
    spec:
      securityContext:
        fsGroup: 1000 
        runAsUser: 0
      containers:
      - name: jenkins
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        imagePullPolicy: Always
        image: ariretiarno/jenkins:latest
        ports:
        - containerPort: 8080
        - name: jnlp-port
          containerPort: 50000
        volumeMounts:
        - mountPath: "/var/jenkins_home"
          name: jenkins-volume
        - name: jenkins-casc
          mountPath: "/var/jenkins_home/casc.yaml"
          subPath: "casc.yaml"
      volumes:
      - name: jenkins-volume
        persistentVolumeClaim:
         claimName: jenkins-dynamic-volume
      - name: jenkins-casc
        configMap:
          name: jenkins-casc-configmap
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-dynamic-volume
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc-configmap
  namespace: jenkins
data:
  casc.yaml: |
    jenkins:
      systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
      securityRealm:
        local:
          allowsSignup: false
          users:
           - id: ari
             password: 12345
      authorizationStrategy:
        globalMatrix:
          permissions:
            - "Overall/Administer:ari"
            - "Overall/Read:authenticated"
      remotingSecurity:
        enabled: true
    security:
      queueItemAuthenticator:
        authenticators:
        - global:
            strategy: triggeringUsersAuthorizationStrategy
    unclassified:
      location:
        url: https://jenkins.ari-k8s.retiarno.my.id/
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
rules:
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - services
  - replicationcontrollers
  - replicasets
  - podtemplates
  - podsecuritypolicies
  - pods
  - pods/log
  - pods/exec
  - podpreset
  - poddisruptionbudget
  - persistentvolumes
  - persistentvolumeclaims
  - jobs
  - endpoints
  - deployments
  - deployments/scale
  - daemonsets
  - cronjobs
  - configmaps
  - namespaces
  - events
  - secrets
  verbs:
  - create
  - get
  - watch
  - delete
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:jenkins